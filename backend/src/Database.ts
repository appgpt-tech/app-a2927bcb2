//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { NewsUpdatesEntity } from './db/NewsUpdates.entity';
import { EntertainmentEntity } from './db/Entertainment.entity';
import { PhotographsEntity } from './db/Photographs.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      NewsUpdatesEntity,
      EntertainmentEntity,
      PhotographsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      NewsUpdates: [
        {
          title: 'title 1',
          content: 'content 1',
          publicationDate: '2024-11-16T08:59:30.695Z',
          author: 'author 1',
          id: 72,
        },
        {
          title: 'title 2',
          content: 'content 2',
          publicationDate: '2023-12-16T23:08:19.183Z',
          author: 'author 2',
          id: 30,
        },
        {
          title: 'title 3',
          content: 'content 3',
          publicationDate: '2024-07-05T19:41:32.063Z',
          author: 'author 3',
          id: 98,
        },
        {
          title: 'title 4',
          content: 'content 4',
          publicationDate: '2023-08-06T23:55:26.642Z',
          author: 'author 4',
          id: 33,
        },
        {
          title: 'title 5',
          content: 'content 5',
          publicationDate: '2023-04-18T06:10:09.090Z',
          author: 'author 5',
          id: 72,
        },
      ],
      Entertainment: [
        {
          title: 'title 1',
          description: 'description 1',
          category: 'category 1',
          publicationDate: '2023-10-23T16:27:43.612Z',
          id: 88,
        },
        {
          title: 'title 2',
          description: 'description 2',
          category: 'category 2',
          publicationDate: '2023-08-19T20:52:57.539Z',
          id: 69,
        },
        {
          title: 'title 3',
          description: 'description 3',
          category: 'category 3',
          publicationDate: '2024-08-23T08:13:26.310Z',
          id: 42,
        },
        {
          title: 'title 4',
          description: 'description 4',
          category: 'category 4',
          publicationDate: '2023-07-03T16:45:02.781Z',
          id: 52,
        },
        {
          title: 'title 5',
          description: 'description 5',
          category: 'category 5',
          publicationDate: '2024-03-20T15:08:26.865Z',
          id: 26,
        },
      ],
      Photographs: [
        {
          imageUrl: 'imageUrl 1',
          caption: 'caption 1',
          photographerName: 'photographerName 1',
          dateTaken: '2023-11-17T07:27:11.948Z',
          id: 35,
        },
        {
          imageUrl: 'imageUrl 2',
          caption: 'caption 2',
          photographerName: 'photographerName 2',
          dateTaken: '2024-06-01T10:46:35.054Z',
          id: 35,
        },
        {
          imageUrl: 'imageUrl 3',
          caption: 'caption 3',
          photographerName: 'photographerName 3',
          dateTaken: '2024-03-14T17:30:04.118Z',
          id: 12,
        },
        {
          imageUrl: 'imageUrl 4',
          caption: 'caption 4',
          photographerName: 'photographerName 4',
          dateTaken: '2025-02-04T22:02:10.787Z',
          id: 52,
        },
        {
          imageUrl: 'imageUrl 5',
          caption: 'caption 5',
          photographerName: 'photographerName 5',
          dateTaken: '2023-10-23T07:56:16.142Z',
          id: 30,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('NewsUpdatesEntity', data.NewsUpdates);
      await this.SeedResource('EntertainmentEntity', data.Entertainment);
      await this.SeedResource('PhotographsEntity', data.Photographs);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
